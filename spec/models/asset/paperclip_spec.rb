require 'spec_helper'

describe Asset, type: :model do
  describe "paperclip" do
    use_extended_style

    let :asset do
      Asset.make file: file_fixture
    end

    let :pdf_asset do
      Asset.make file: file_fixture('test.pdf')
    end

    context "on creating an image asset" do
      it "stores the file type" do
        expect(asset.file_content_type).to eq 'image/jpeg'
      end

      it "stores the file size" do
        expect(asset.file_file_size).to eq 5545
      end

      it "stores the fingerprint" do
        expect(asset.file_fingerprint).to eq 'ca05197526f33a39b871bd5eda640182'
      end

      it "generates an admin thumbnail for the uploaded file" do
        expect(asset.file).to be_exists(:admin)
      end

      it "does not generate the extended style for the uploaded file" do
        expect(asset.file).to_not be_exists(:extended)
      end

      it "stores the admin dimensions" do
        expect(asset.file_dimensions).to include 'admin' => '180x180'
      end
    end

    context "on creating a pdf asset" do
      it "is valid" do
        expect(pdf_asset).to be_valid
      end
    end

    context "#admin_image_url" do
      it "is nil for non-image assets" do
        expect(pdf_asset.admin_image_url).to be_nil
      end

      it "is the same as url_for(:admin) for image assets" do
        expect(asset.admin_image_url).to eq asset.url_for(:admin)
      end
    end

    context "#url_for" do
      it "returns a url for existing jobs as a symbol" do
        expect(asset.url_for(:admin)).to match /.*\/admin\/lady_bird\.jpg/
      end

      it "returns a url for existing jobs as a string" do
        expect(asset.url_for('admin')).to match /.*\/admin\/lady_bird\.jpg/
      end

      it "returns a url for non-autogenerated jobs" do
        expect(asset.url_for(:extended)).to match /.*\/extended\/lady_bird\.jpg/
      end

      it "processes the style if nescessary" do
        expect(asset).to receive(:reprocess_for).with(:extended)
        asset.url_for(:extended)
      end
    end

    context "#dimensions_for" do
      let :asset_with_dimensions do
        Asset.new(file_dimensions: { 'extended' => '1x1' })
      end

      it "returns the dimensions of the asset" do
        expect(asset_with_dimensions).to receive(:reprocess_for).with(:extended)
        expect(asset_with_dimensions.dimensions_for(:extended)).to eq '1x1'
      end

      it "processes the style if nescessary" do
        expect(asset_with_dimensions).to receive(:reprocess_for).with(:extended)
        asset_with_dimensions.dimensions_for(:extended)
      end
    end

    context "#reprocess_for!" do
      it "deletes the existing style" do
        asset.url_for(:extended)
        expect(asset.file).to receive(:flush_deletes).at_least(:once)
        asset.reprocess_for!(:extended)
      end

      it "processes the style" do
        asset.reprocess_for(:extended)
        asset.file_dimensions = {}

        expect(asset).to receive(:reprocess_for).with(:extended)
        asset.reprocess_for!(:extended)

        expect(asset.file_dimensions).not_to include 'extended'
      end
    end

    context "#reprocess_for" do
      it "returns nil for missing images" do
        expect(asset.file).to receive(:reprocess!).and_raise(Errno::ENOENT)
        expect(asset.reprocess_for!(:extended)).to be_nil
      end

      it "returns nil for invalid images" do
        expect(asset.file).to receive(:reprocess!).and_raise(Paperclip::Errors::NotIdentifiedByImageMagickError)
        expect(asset.reprocess_for!(:extended)).to be_nil
      end

      it "returns nil for an invalid style" do
        expect(Asset.new.dimensions_for(:missing_style)).to be_nil
      end

      context "with unprocessed style" do
        it "persists the dimensions on the asset" do
          expect(asset).to receive(:save)
          asset.reprocess_for(:extended)
          expect(asset.file_dimensions['extended']).to eq '60x60'
        end

        it "generates a resized image file" do
          expect(asset.file.exists?(:extended)).to be_falsey
          asset.dimensions_for(:extended)

          expect(asset.file.exists?(:extended)).to be_truthy
        end
      end

      context "with an already processed style" do
        it "does not processes the style" do
          asset = Asset.new(file_dimensions: { 'extended' => '1x1' })
          expect(asset.file).not_to receive(:reprocess!)
          asset.reprocess_for(:extended)
        end
      end

      context "with an existing file" do
        it "processes the style" do
          asset = Asset.new(file_dimensions: {})
          allow(asset.file).to receive_messages(exists?: true)
          expect(asset.file).to receive(:reprocess!)
          asset.reprocess_for(:extended)
        end
      end
    end

    context "#reset_file_dimensions!" do
      it "is called when an asset is replaced" do
        expect(asset).to receive(:reset_file_dimensions!)
        asset.update_attributes(file: file_fixture('invalid_colour_profile.jpg'))
      end

      it "is not called when an image style is procesed" do
        expect(asset).not_to receive(:reset_file_dimensions!)
        asset.reprocess_for!(:extended)
      end

      it "deletes all stored dimensions which aren't admin and original" do
        orginal_dimensions = {
          'original' => '1000x1000',
          'admin'    => '180x180',
        }
        dimensions = orginal_dimensions.merge({
          'extended' => '1x1'
        },)
        asset = Asset.new(file_dimensions: dimensions)
        asset.reset_file_dimensions!
        expect(asset.file_dimensions).to eq orginal_dimensions
      end
    end
  end
end
